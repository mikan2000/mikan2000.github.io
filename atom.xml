<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-15T07:02:18.747Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="http://yoursite.com/2015/09/15/test/"/>
    <id>http://yoursite.com/2015/09/15/test/</id>
    <published>2015-09-15T07:01:49.000Z</published>
    <updated>2015-09-15T07:02:18.747Z</updated>
    <content type="html"><![CDATA[<p>测试hexo双部署</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试hexo双部署</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/09/10/hello-world/"/>
    <id>http://yoursite.com/2015/09/10/hello-world/</id>
    <published>2015-09-10T02:19:00.571Z</published>
    <updated>2015-09-10T02:19:00.571Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/tommy351/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[java设计模式 模板方法模式]]></title>
    <link href="http://yoursite.com/2015/03/06/java-template-methed/"/>
    <id>http://yoursite.com/2015/03/06/java-template-methed/</id>
    <published>2015-03-06T15:05:20.000Z</published>
    <updated>2015-09-10T02:19:00.571Z</updated>
    <content type="html"><![CDATA[<p>所谓模板板式，也就是说在父类的的模板方法定义了一系列算法步骤，子类可以去实现（覆盖）其中某些步骤，但不能改变这些步骤的执行顺序。</p>
<p>父类是一个抽象类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatePattern</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//模板方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">templateMethod</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    	</span><br><span class="line">        method1();  </span><br><span class="line">        method2();<span class="comment">//勾子方法  </span></span><br><span class="line">        method3();<span class="comment">//抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"父类实现业务逻辑"</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"父类默认实现，子类可覆盖"</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;<span class="comment">//子类负责实现业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>父类中有三个方法，分别是method1()，method2()和method3()。 </p>
<p>method1()是私有方法，有且只能由父类实现逻辑，由于方法是private的，所以只能父类调用。 </p>
<p>method2()是所谓的勾子方法。父类提供默认实现，如果子类觉得有必要定制，则可以覆盖父类的默认实现。 </p>
<p>method3()是子类必须实现的方法，即制定的步骤。</p>
<p>子类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatePatternImpl</span> <span class="keyword">extends</span> <span class="title">TemplatePattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类中覆盖了method2()方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类中具体实现method3()方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>流程执行顺序是由父类掌控的，子类来实现具体内容。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>所谓模板板式，也就是说在父类的的模板方法定义了一系列算法步骤，子类可以去实现（覆盖）其中某些步骤，但不能改变这些步骤的执行顺序。</p>
<p>父类是一个抽象类：<br><figure class="highlight java"><table><tr><td class=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2014/07/14/dog/"/>
    <id>http://yoursite.com/2014/07/14/dog/</id>
    <published>2014-07-14T06:59:17.000Z</published>
    <updated>2015-09-10T02:19:00.571Z</updated>
    <content type="html"><![CDATA[<p><img src="http://photo.fanfou.com/n0/04/8y/3r_96791.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://photo.fanfou.com/n0/04/8y/3r_96791.jpg" alt=""></p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[notebook]]></title>
    <link href="http://yoursite.com/2014/07/14/notebook/"/>
    <id>http://yoursite.com/2014/07/14/notebook/</id>
    <published>2014-07-14T06:42:28.000Z</published>
    <updated>2015-09-10T02:19:00.571Z</updated>
    <content type="html"><![CDATA[<p><img src="http://photo2.fanfou.com/n0/0a/m7/tt_497401.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://photo2.fanfou.com/n0/0a/m7/tt_497401.jpg" alt=""></p>
]]>
    </summary>
    
  </entry>
  
</feed>
