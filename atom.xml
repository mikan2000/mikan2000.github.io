<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-15T10:40:36.490Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[mikan]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在ubuntu14.04上搭建php、nginx环境]]></title>
    <link href="http://yoursite.com/2015/09/15/ubuntu-php-environment/"/>
    <id>http://yoursite.com/2015/09/15/ubuntu-php-environment/</id>
    <published>2015-09-15T09:57:23.000Z</published>
    <updated>2015-09-15T10:40:36.490Z</updated>
    <content type="html"><![CDATA[<p>记录下在ubuntu14.04上搭建php、nginx环境</p>
<p>先装nginx</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure>
<p>接下来是php，不懂php，一大堆先都装上</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php5 php5-common php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-xcache php5-mcrypt</span><br></pre></td></tr></table></figure>
<p>修改nginx配置</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available</span><br><span class="line">vim example.com</span><br></pre></td></tr></table></figure>
<p>添加下面内容保存<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        <span class="comment">#listen [::]:80 default_server ipv6only=on;</span></span><br><span class="line"></span><br><span class="line">        root /mnt/example; <span class="comment">#主机上的网站路径</span></span><br><span class="line">        index index.php;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Make site accessible from http://localhost/</span></span><br><span class="line">        server_name www.example.com example.com <span class="number">121.43</span>.<span class="number">159.99</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$host</span> = <span class="string">'example.com'</span> ) &#123;</span><br><span class="line">		rewrite ^/(.*)$ http://www.example.com/<span class="variable">$1</span> permanent;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (!<span class="operator">-e</span> <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                rewrite  ^(.*)$  /index.php?s=<span class="variable">$1</span>  last;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	location ~* .php &#123;</span><br><span class="line">                fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">                fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">                fastcgi_index index.php;</span><br><span class="line">                include fastcgi_params;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>启动php-fpm重启nginx就可以了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录下在ubuntu14.04上搭建php、nginx环境</p>
<p>先装nginx</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</sp]]>
    </summary>
    
      <category term="php nginx php环境 ubuntu" scheme="http://yoursite.com/tags/php-nginx-php%E7%8E%AF%E5%A2%83-ubuntu/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java设计模式 模板方法模式]]></title>
    <link href="http://yoursite.com/2015/03/06/java-template-methed/"/>
    <id>http://yoursite.com/2015/03/06/java-template-methed/</id>
    <published>2015-03-06T15:05:20.000Z</published>
    <updated>2015-09-15T10:07:54.441Z</updated>
    <content type="html"><![CDATA[<p>所谓模板板式，也就是说在父类的的模板方法定义了一系列算法步骤，子类可以去实现（覆盖）其中某些步骤，但不能改变这些步骤的执行顺序。</p>
<p>父类是一个抽象类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatePattern</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//模板方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">templateMethod</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    	</span><br><span class="line">        method1();  </span><br><span class="line">        method2();<span class="comment">//勾子方法  </span></span><br><span class="line">        method3();<span class="comment">//抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"父类实现业务逻辑"</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"父类默认实现，子类可覆盖"</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>;<span class="comment">//子类负责实现业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>父类中有三个方法，分别是method1()，method2()和method3()。 </p>
<p>method1()是私有方法，有且只能由父类实现逻辑，由于方法是private的，所以只能父类调用。 </p>
<p>method2()是所谓的勾子方法。父类提供默认实现，如果子类觉得有必要定制，则可以覆盖父类的默认实现。 </p>
<p>method3()是子类必须实现的方法，即制定的步骤。</p>
<p>子类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatePatternImpl</span> <span class="keyword">extends</span> <span class="title">TemplatePattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类中覆盖了method2()方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类中具体实现method3()方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>流程执行顺序是由父类掌控的，子类来实现具体内容。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>所谓模板板式，也就是说在父类的的模板方法定义了一系列算法步骤，子类可以去实现（覆盖）其中某些步骤，但不能改变这些步骤的执行顺序。</p>
<p>父类是一个抽象类：<br><figure class="highlight java"><table><tr><td class=]]>
    </summary>
    
      <category term="java 设计模式" scheme="http://yoursite.com/tags/java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
